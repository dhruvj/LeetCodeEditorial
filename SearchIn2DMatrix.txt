Search a 2D Matrix II(https://leetcode.com/problems/search-a-2d-matrix-ii/)

Brute force:

We can walk over each element in the matrix and check if it equals the element we are looking for. 

Complexity of this solution: O(m*n)

However, we are not taking any advantage of the fact that the elements are sorted row and column wise.

Let's take a step back and think. Hmm. Whenever we are dealing with sorted numbers and we have to search an element, what usually comes to our mind is binary search. Slight improvement over our last approach could be that we perform binary search on each row or column.

Complexity of this solution: O(m*logn) if we perform binary search on each row. O(n*logm) if we perform binary search on each column.

That's some improvement, however we are still only taking advantage of sorted order of either row or column, not both.

Can we do better?

Intuition: Let's say we are sitting at the bottom left(m-1, 0) corner of matrix. Moving up will reduce the number and moving to right will increase the number.


With this fact, we will start from bottom left corner, at each turn we check if the number we are looking of is:
1) Greater than the current one: We move to element above us.
2) Smaller than the current one: We move to element right to us.
3) Equal: We found the element. 

We will terminate when we move out of matrix. In that case, element doesn't exist in the matrix.

Complexity: O(m+n)

Code:
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        if (m == 0) return false;
    
        int n = matrix[0].length;
        
        int i = m-1, j = 0; // start at the bottom left
        
        while (i != -1 && j != n) {
            if (matrix[i][j] > target) {
                i--;
            } else if (matrix[i][j] < target) {
                j++;
            } else {
                return true;
            }
        }
        return false;
    }
}





